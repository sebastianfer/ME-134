#include <WiFi.h>
#include "time.h"
#include "sntp.h"
#include <ESP32Servo.h>

const char* ssid       = "Tufts_Wireless";
const char* password   = "";

const char* ntpServer1 = "pool.ntp.org";
const char* ntpServer2 = "time.nist.gov";

// Define time zone offsets and daylight offsets for three different cities
const long Boston_gmtOffset_sec = -14400;   // UTC -4
const int Boston_daylightOffset_sec = 0;     // No Daylight Offset
const long LA_gmtOffset_sec = -25200;        // UTC -7
const int LA_daylightOffset_sec = 0;
const long Chicago_gmtOffset_sec = -18000;   // UTC -5
const int Chicago_daylightOffset_sec = 0;

// Define a variable to track the current time zone
long current_gmtOffset_sec = Boston_gmtOffset_sec;
int current_daylightOffset_sec = Boston_daylightOffset_sec;

// Initialize variables
int buttonState = 0;
int counter = 0;
int minutes = 0;
int hours = 0;

// Define the servo object
Servo minutes_servo;
Servo hours_servo;

// Set the servo pin (you can change this to your preferred GPIO pin)
const int minutes_servo_pin = 13;
const int hours_servo_pin = 14;

void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
  minutes = timeinfo.tm_min;  //accessing element tm_min of struct tm (0-59)
  hours = timeinfo.tm_hour;   //accessing element tm_sec of struct tm (0-23)
  if (hours > 12) {   //converting hours to a 12-hour format
    hours = hours - 12;
  }

  if (hours == 0){
    hours = 12;
  }
}

// Callback function (get's called when time adjusts via NTP)
void timeavailable(struct timeval *t)
{
  Serial.println("Got time adjustment from NTP!");
  printLocalTime();
}

// Callback function that changes the time zone
void configTimeZone(long current_gmtOffset_sec, int current_daylightOffset_sec) {
  configTime(current_gmtOffset_sec, current_daylightOffset_sec, ntpServer1, ntpServer2);
}

void setup()
{
  Serial.begin(115200);

  // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );
  sntp_servermode_dhcp(1);   
  
  configTimeZone(current_gmtOffset_sec, current_daylightOffset_sec);

  //connect to WiFi
  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
  }
  Serial.println(" CONNECTED");

  minutes_servo.attach(minutes_servo_pin);
  hours_servo.attach(hours_servo_pin);

  // Initialize LEDs
  pinMode(21, OUTPUT);  // Boston Time Zone
  pinMode(22, OUTPUT);  // LA Time Zone
  pinMode(23, OUTPUT);  // Chucago Time Zone

  digitalWrite(21, HIGH);
  digitalWrite(22, LOW);
  digitalWrite(23, LOW);

  // Initialize Button
  pinMode(15, INPUT);
  
}
void loop()
{ 
  buttonState = digitalRead(15);

  if (buttonState == HIGH and counter == 0) {
    configTimeZone(LA_gmtOffset_sec, LA_daylightOffset_sec);
    digitalWrite(22, HIGH);
    digitalWrite(21, LOW);
    digitalWrite(23, LOW);
    buttonState = LOW;
    counter += 1;
  } else if (buttonState == HIGH and counter == 1) {
    configTimeZone(Chicago_gmtOffset_sec, Chicago_daylightOffset_sec);
    digitalWrite(22, LOW);
    digitalWrite(21, LOW);
    digitalWrite(23, HIGH);
    buttonState = LOW;
    counter += 1;
  } else if (buttonState = HIGH and counter == 2) {
    configTimeZone(Boston_gmtOffset_sec, Boston_daylightOffset_sec);
    digitalWrite(22, LOW);
    digitalWrite(21, HIGH);
    digitalWrite(23, LOW);
    buttonState = LOW;
    counter = 0;
  }
  
// Hours
  for (int i = 0; i < hours; i++) {
    hours_servo.write(0);
    delay(200);
    hours_servo.write(180);
    delay(200);
    if (i == hours){
      break;
    }
  }

// Minutes
   for (int j = 0; j < minutes; j++) {
    minutes_servo.write(0);
    delay(200);
    minutes_servo.write(90);
    delay(200);
    if (j == minutes) {
      break;
    }
   }

}
